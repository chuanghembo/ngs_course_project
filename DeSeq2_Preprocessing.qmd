## Library

```{r}
library(tidyverse)
library(DESeq2)
```

## Load data

```{r}
data_path <- "../CountMatrixRefAlligned.tsv"
meta_path <-"../meta_data.csv"


count_matrix <- read.csv(data_path, 
                         row.names = "Geneid", 
                         sep = '\t') |> 
        as.matrix()

meta_data <- read.csv(meta_path,
                      row.names = 1)

```

Convert the columns in metadata to factor

```{r}
meta_data <-  meta_data |> 
              mutate(condition = factor(condition, 
                                        levels = c('wild_type',
                                                   'PPM1DT_leukemia',
                                                   'wild_type_leukemia'
                                                   )))
```

## Check data format

In DESeq2, the colnames of the count-matrix must be the same and in same order as the rownames of the meta_data

```{r}
all(rownames(meta_data) == colnames(data))
```

## DEseq2 analysis

```{r}
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
                              colData = meta_data,
                              design = ~ condition)

dds <- DESeq(dds)
```

Looking at result from DEseq

```{r}
meta_data

WTvsWTLeukemia <- results(dds, 
                             contrast= c('condition', 
                                         'wild_type_leukemia',
                                         'wild_type'),
                                          tidy = TRUE) 


WTvsPPM1DTLeukemia <- results(dds, 
                             contrast= c('condition', 
                                         'PPM1DT_leukemia',
                                         'wild_type'),
                                          tidy = TRUE) 

PPM1DTLeukemiavsWTLeukemia <- results(dds, 
                             contrast= c('condition', 
                                         'PPM1DT_leukemia',
                                         'wild_type_leukemia'),
                                          tidy = TRUE) 

# p.adj
# log2fc > 1
WTvsWTLeukemia_clean <- WTvsWTLeukemia |> 
        na.omit() |> 
        filter(padj < 0.05,
               abs(log2FoldChange) > 1)

WTvsPPM1DTLeukemia_clean <- WTvsPPM1DTLeukemia |> 
        na.omit() |> 
        filter(padj < 0.05,
               abs(log2FoldChange) > 1)

PPM1DTLeukemiavsWTLeukemia_clean <- PPM1DTLeukemiavsWTLeukemia |> 
        na.omit() |> 
        filter(padj < 0.05,
               abs(log2FoldChange) > 1)


#write.csv(WTvsWTLeukemia_clean, '../WT_vs_WTLeukemia.csv')
#write.csv(WTvsPPM1DTLeukemia_clean, '../WT_vs_PPM1DTLeukemia.csv')
#write.csv(PPM1DTLeukemiavsWTLeukemia_clean , '../PPM1DTLeukemia_vs_WTLeukemia_clean.csv')

```

### **Variance stabilizing transformation**

```{r}
vsd <- rlog(dds, blind=FALSE)
```

## Visualization

### PCA

```{r}
plotPCA(vsd, intgroup=c("condition")) +
        scale_color_manual(
                values = c("chartreuse3", "red", "black"),
                name = "group", 
                labels = c("Health",
                           expression(Ppm1d^"T/-"),
                           "WT")
                ) +
        theme(legend.text.align = 0)
```

### Volcano plot

```{r}

res_clean |> ggplot(aes(log2FoldChange, -log10(padj))) +
        geom_point()

```
